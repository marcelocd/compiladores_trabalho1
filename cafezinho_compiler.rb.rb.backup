# -------------------------------- *
# UniversIDade Federal de Goiás    *
# Instituto de Informática         *
# Creation date:   10/08/19        *
# Last updated on: 13/08/19        *
# Author: Marcelo Cardoso Dias     *
# -------------------------------- */

# cafezinho_compiler.rb

# ------------------------------------------- *
# This is a lexical and syntactic analyzer    *
# implemented in Ruby for Cafezinho language, *
# a programming language invented for a       *
# Compilers study purpose.                    *
# ------------------------------------------- */

# REQUIREMENTS -------------------------------
require "rly"

# --------------------------------------------

# LEXICAL ANALYZER ---------------------------
class CafezinhoLex < Rly::Lex
   # LITERALS --------------------------------
	literals '+-*/?!,:;[](){}%=><'

	# -----------------------------------------

	# IGNORE ----------------------------------
	ignore " \t\n"

	# -----------------------------------------

	# TOKENS ----------------------------------
	token :COMMENT, /\/\*[^\*]*\*+([^[\*\/]][^\*]*\*+)*\// do end
	
	token :UNFINISHED_COMMENT, /\/\*.*/ do |t|
		if t.type.to_s == 'UNFINISHED_COMMENT'
			puts 'ERRO: COMENTARIO NAO TERMINA'
		end

		nil
	end

	token :INTCONST, /\d+/ do |t|
		t.value = t.value.to_i
		t
	end

	token :CARCONST, /[a-zA-Z]/

	token :CONST_STRING, /\"[^\"]*\"/

	token :RESERVED_WORD, /programa|int|car|intconst|carconst|retorne|leia|escreva|novalinha|se|entao|senao|enquanto|execute|e|ou/

	token :ID, /[a-zA-Z]+[0-9a-zA-Z]*/

	# -----------------------------------------

	on_error do |t|
	   puts "ERRO: CARACTER INVALIDO"

	   t.lexer.pos += 1

	   nil
	end
end

# --------------------------------------------

# SYNTACTICAL ANALYZER -----------------------
class CafezinhoParse < Rly::Yacc
	rule 'DeclFuncVar : DeclProg'

	rule 'DeclFuncVar : Tipo ID DeclVar ";" DeclFuncVar
							| Tipo ID "[" INTCONST "]" DeclVar ";" DeclFuncVar
							| Tipo ID DeclFunc DeclFuncVar
							| " "'

	rule 'DesclProg : programa Bloco'
	
	rule 'DeclVar : "," ID DeclVar
					  | "," ID "[" INTCONST "]" DeclVar
					  | '
	
	rule 'DeclFunc : "(" ListaParametros ")" Bloco'
	
	rule 'ListaParametros : epsilon
								 | ListaParametrosCont'

	rule 'ListaParametrosCont : Tipo ID
									  | Tipo ID "[" "]"
									  | Tipo ID "," ListaParametrosCont
									  | Tipo ID "[" "]" "." ListaParametrosCont'
	
	rule 'Bloco : "{" ListaDeclVar ListaComando "}"
					| "{" ListaDeclVar "}"'
	
	rule 'ListaDeclVar : " "
							 | Tipo ID DeclVar ";" ListaDeclVar
							 | Tipo ID "[" INTCONST "]" DeclVar ";" ListaDeclVar'
	
	rule 'Tipo : int
				  | car'
	
	rule 'ListaComando : Comando
							 | Comando ListaComando'

	rule 'Comando : ";"
					  | Expr ";"
					  | retorne Expr ";"
					  | leia LValueExpr ":"
					  | escreva Expr ";"
					  | escreva CONST_STRING ";"
					  | novalinha ";"
					  | se "(" Expr ")" entao Comando
					  | se "(" Expr ")" entao Comando senao Comando
					  | enquanto "(" Expr ")" execute Comando
					  | Bloco'

	rule 'Expr : AssignExpr'

	rule 'AssignExpr : CondExpr
						  | LValueExpr "=" AssignExpr'

	rule 'CondExpr : OrExpr
						| OrExpr "?" Expr ":" CondExpr'

	rule 'OrExpr : OrExpr ou AndExpr
					 | AndExpr'

	rule 'AndExpr : AndExpr e EqExpr
					  | EqExpr'

	rule 'EqExpr : EqExpr "=" "=" DesigExpr
					 | EqExpr "!" "=" DesigExpr
					 | DesigExpr'

	rule 'DesigExpr : DesigExpr "<" AddExpr
						 | DesigExpr ">" AddExpr
						 | DesigExpr ">" "=" AddExpr
						 | DesigExpr "<" "=" AddExpr
						 | AddExpr'

	rule 'AddExpr : AddExpr "+" MultExpr
					  | AddExpr "-" MulExpr
					  | MulExpr'

	rule 'MulExpr: MulExpr "*" UnExpr
					 | MulExpr "/" UnExpr
					 | MulExpr "%" UnExpr
					 | UnExpr'

	rule 'UnExpr : "-" PrimExpr
					 | "!" PrimExpr
					 | PrimExpr'

	rule 'LValueExpr : ID "[" Expr "]"
						  | ID'

	rule 'PrimExpr : ID "(" ListExpr ")"
						| ID "(" ")"
						| ID "[" Expr "]"
						| ID
						| CARCONST
						| INTCONST'

	rule 'ListExpr : AssignExpr
						| ListExpr "," AssignExpr'
end

# --------------------------------------------

# TESTING ------------------------------------
parser = CafezinhoParse.new(CafezinhoLex.new())

puts parser.parse('2+2')

=begin
text_file_path = ARGV.first

str = File.read("#{text_file_path}")

lex = CafezinhoLex.new(str)

loop do
	t = lex.next

	if t == nil
		break
	end

	puts "#{t} : #{t.type}"
end
=end

# --------------------------------------------